// lib/discord/webhook.ts

import axios from 'axios'
import { 
  DiscordWebhookPayload, 
  DiscordEmbed,
  NotificationEvent, 
  WebhookChannel,
  EmbedColors 
} from '@/types/discord'
import { doc, getDoc } from 'firebase/firestore'
import { db } from '@/lib/firebase'
import { safeFormatDate, formatDateRange } from '@/lib/utils/date'

// Helper function to get webhook URL from database settings
async function getWebhookUrl(channel: WebhookChannel): Promise<string | null> {
  try {
    const settingsDoc = await getDoc(doc(db, 'settings', 'discord'))
    
    if (!settingsDoc.exists()) {
      console.warn('Discord settings not found')
      return null
    }
    
    const settings = settingsDoc.data()
    return settings.webhooks?.[channel] || null
  } catch (error) {
    console.error('Error getting webhook URL:', error)
    return null
  }
}

// Helper function to check if notification is enabled
async function isNotificationEnabled(type: string): Promise<boolean> {
  try {
    const settingsDoc = await getDoc(doc(db, 'settings', 'discord'))
    
    if (!settingsDoc.exists()) return false
    
    const settings = settingsDoc.data()
    return settings.notifications?.[type] !== false // default true
  } catch (error) {
    console.error('Error checking notification settings:', error)
    return false
  }
}

// Helper function to get leave type emoji and label
function getLeaveTypeInfo(type: string): { emoji: string; label: string; color: number } {
  switch (type) {
    case 'sick':
      return { emoji: 'üè•', label: '‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢', color: 0xf472b6 } // pink
    case 'personal':
      return { emoji: 'üè†', label: '‡∏•‡∏≤‡∏Å‡∏¥‡∏à', color: 0x3b82f6 } // blue
    case 'vacation':
      return { emoji: 'üèñÔ∏è', label: '‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô', color: 0x10b981 } // green
    default:
      return { emoji: 'üìã', label: '‡∏•‡∏≤', color: EmbedColors.INFO }
  }
}

export class DiscordWebhook {
  private channel: WebhookChannel

  constructor(channel: WebhookChannel) {
    this.channel = channel
  }

  async send(payload: DiscordWebhookPayload): Promise<boolean> {
    try {
      // Get webhook URL from database instead of config
      const webhookUrl = await getWebhookUrl(this.channel)
      
      if (!webhookUrl) {
        console.log(`Webhook URL not configured for channel: ${this.channel}`)
        return false
      }

      await axios.post(webhookUrl, payload)
      return true
    } catch (error) {
      console.error('Discord webhook error:', error)
      return false
    }
  }

  async sendEmbed(embed: DiscordEmbed): Promise<boolean> {
    return this.send({ embeds: [embed] })
  }

  async sendText(content: string): Promise<boolean> {
    return this.send({ content })
  }
}

// Notification handlers
export async function sendCheckInNotification(event: NotificationEvent) {
  // Check if notification is enabled
  const enabled = await isNotificationEnabled('checkIn')
  if (!enabled) return false

  const webhook = new DiscordWebhook(WebhookChannel.CHECK_IN)
  
  const embed: DiscordEmbed = {
    author: {
      name: event.userName,
      icon_url: event.userAvatar || undefined
    },
    description: `‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏ó‡∏µ‡πà**${event.locationName}**`,
    color: EmbedColors.SUCCESS,
    fields: [
      {
        name: '‡πÄ‡∏ß‡∏•‡∏≤',
        value: safeFormatDate(event.timestamp, 'HH:mm'),
        inline: true
      },
      {
        name: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
        value: safeFormatDate(event.timestamp, 'dd MMM yyyy'),
        inline: true
      }
    ],
    footer: {
      text: 'AMGO Check-in System'
    },
    timestamp: new Date().toISOString()
  }

  return webhook.sendEmbed(embed)
}

export async function sendCheckOutNotification(event: NotificationEvent) {
  // Check if notification is enabled
  const enabled = await isNotificationEnabled('checkOut')
  if (!enabled) return false

  const webhook = new DiscordWebhook(WebhookChannel.CHECK_IN)
  const { totalHours, overtime } = event.data || {}
  
  const embed: DiscordEmbed = {
    author: {
      name: event.userName,
      icon_url: event.userAvatar || undefined
    },
    description: `‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`,
    color: EmbedColors.INFO,
    fields: [
      {
        name: '‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô',
        value: `${totalHours || 0} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`,
        inline: true
      },
      ...(overtime > 0 ? [{
        name: '‡πÇ‡∏≠‡∏ó‡∏µ',
        value: `${overtime} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`,
        inline: true
      }] : [])
    ],
    timestamp: new Date().toISOString()
  }

  return webhook.sendEmbed(embed)
}

export async function sendLeaveRequestNotification(event: NotificationEvent) {
  // Check if notification is enabled
  const enabled = await isNotificationEnabled('leaveRequest')
  if (!enabled) return false

  const webhook = new DiscordWebhook(WebhookChannel.LEAVE)
  const { leaveType, startDate, endDate, totalDays, reason, isUrgent } = event.data || {}
  
  const leaveInfo = getLeaveTypeInfo(leaveType)
  
  const embed: DiscordEmbed = {
    title: `${leaveInfo.emoji} ‡∏Ñ‡∏≥‡∏Ç‡∏≠${leaveInfo.label}‡πÉ‡∏´‡∏°‡πà`,
    author: {
      name: event.userName,
      icon_url: event.userAvatar || undefined
    },
    color: leaveInfo.color,
    fields: [
      {
        name: 'üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏≤',
        value: formatDateRange(startDate, endDate, 'dd MMM yyyy'),
        inline: true
      },
      {
        name: 'üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô',
        value: `${totalDays} ‡∏ß‡∏±‡∏ô${isUrgent ? ' (‡∏•‡∏≤‡∏î‡πà‡∏ß‡∏ô)' : ''}`,
        inline: true
      },
      {
        name: 'üìù ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•',
        value: reason || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        inline: false
      }
    ],
    footer: {
      text: '‚è≥ ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ | AMGO Leave System'
    },
    timestamp: new Date().toISOString()
  }

  // Add urgent badge if needed
  if (isUrgent) {
    embed.fields!.push({
      name: '‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏',
      value: '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡∏î‡πà‡∏ß‡∏ô - ‡∏Ñ‡∏¥‡∏î‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
      inline: false
    })
  }

  return webhook.sendEmbed(embed)
}

export async function sendLeaveApprovalNotification(event: NotificationEvent) {
  // Check if notification is enabled
  const enabled = await isNotificationEnabled('leaveApproval')
  if (!enabled) return false

  const webhook = new DiscordWebhook(WebhookChannel.LEAVE)
  const { leaveType, startDate, endDate, approvedBy } = event.data || {}
  
  const leaveInfo = getLeaveTypeInfo(leaveType)
  
  const embed: DiscordEmbed = {
    title: `‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥${leaveInfo.label}`,
    author: {
      name: event.userName,
      icon_url: event.userAvatar || undefined
    },
    description: `‡∏Ñ‡∏≥‡∏Ç‡∏≠${leaveInfo.label}‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß`,
    color: EmbedColors.SUCCESS,
    fields: [
      {
        name: 'üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏≤',
        value: formatDateRange(startDate, endDate, 'dd MMM yyyy'),
        inline: true
      },
      {
        name: 'üë§ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÇ‡∏î‡∏¢',
        value: approvedBy,
        inline: true
      }
    ],
    footer: {
      text: 'AMGO Leave System'
    },
    timestamp: new Date().toISOString()
  }

  return webhook.sendEmbed(embed)
}

export async function sendLeaveRejectionNotification(event: NotificationEvent) {
  // Check if notification is enabled
  const enabled = await isNotificationEnabled('leaveRejection')
  if (!enabled) return false

  const webhook = new DiscordWebhook(WebhookChannel.LEAVE)
  const { leaveType, startDate, endDate, rejectedBy, reason } = event.data || {}
  
  const leaveInfo = getLeaveTypeInfo(leaveType)
  
  const embed: DiscordEmbed = {
    title: `‚ùå ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥${leaveInfo.label}`,
    author: {
      name: event.userName,
      icon_url: event.userAvatar || undefined
    },
    description: `‡∏Ñ‡∏≥‡∏Ç‡∏≠${leaveInfo.label}‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥`,
    color: EmbedColors.DANGER,
    fields: [
      {
        name: 'üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏•‡∏≤',
        value: formatDateRange(startDate, endDate, 'dd MMM yyyy'),
        inline: false
      },
      {
        name: '‚ùå ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•',
        value: reason || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        inline: false
      },
      {
        name: 'üë§ ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÇ‡∏î‡∏¢',
        value: rejectedBy,
        inline: true
      }
    ],
    footer: {
      text: 'AMGO Leave System'
    },
    timestamp: new Date().toISOString()
  }

  return webhook.sendEmbed(embed)
}

export async function sendLateNotification(lateUsers: any[]) {
  // Check if notification is enabled
  const enabled = await isNotificationEnabled('late')
  if (!enabled) return false

  const webhook = new DiscordWebhook(WebhookChannel.ALERTS)
  
  const embed: DiscordEmbed = {
    title: '‚ö†Ô∏è ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏™‡∏≤‡∏¢',
    description: `‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ${lateUsers.length} ‡∏Ñ‡∏ô ‡∏°‡∏≤‡∏™‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ`,
    color: EmbedColors.WARNING,
    fields: lateUsers.map(user => ({
      name: user.name,
      value: `‡∏™‡∏≤‡∏¢ ${user.lateMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`,
      inline: true
    })),
    timestamp: new Date().toISOString()
  }

  return webhook.sendEmbed(embed)
}

export async function sendOvertimeAlert(event: NotificationEvent) {
  // Check if notification is enabled
  const enabled = await isNotificationEnabled('overtime')
  if (!enabled) return false

  const webhook = new DiscordWebhook(WebhookChannel.ALERTS)
  const { hours, isOvernight } = event.data || {}
  
  const embed: DiscordEmbed = {
    title: isOvernight ? 'üåô ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô' : '‚è∞ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ',
    description: `**${event.userName}** ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏°‡∏≤ ${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏•‡πâ‡∏ß`,
    color: isOvernight ? EmbedColors.PURPLE : EmbedColors.WARNING,
    fields: [
      {
        name: '‡∏™‡∏≤‡∏Ç‡∏≤',
        value: event.locationName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        inline: true
      },
      {
        name: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô',
        value: safeFormatDate(event.data?.checkinTime, 'HH:mm'),
        inline: true
      }
    ],
    footer: {
      text: '‡∏Ñ‡∏ß‡∏£‡πÉ‡∏´‡πâ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏á'
    },
    timestamp: new Date().toISOString()
  }

  return webhook.sendEmbed(embed)
}

// Batch notifications
export async function sendDailySummary(data: {
  totalEmployees: number
  checkedIn: number
  late: number
  absent: number
  onLeave: number
}) {
  // Check if notification is enabled
  const enabled = await isNotificationEnabled('dailySummary')
  if (!enabled) return false

  const webhook = new DiscordWebhook(WebhookChannel.HR)
  
  const embed: DiscordEmbed = {
    title: 'üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô',
    description: safeFormatDate(new Date(), 'EEEE dd MMMM yyyy'),
    color: EmbedColors.INFO,
    fields: [
      {
        name: 'üë• ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
        value: `${data.totalEmployees} ‡∏Ñ‡∏ô`,
        inline: true
      },
      {
        name: '‚úÖ ‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô',
        value: `${data.checkedIn} ‡∏Ñ‡∏ô`,
        inline: true
      },
      {
        name: '‚è∞ ‡∏°‡∏≤‡∏™‡∏≤‡∏¢',
        value: `${data.late} ‡∏Ñ‡∏ô`,
        inline: true
      },
      {
        name: '‚ùå ‡∏Ç‡∏≤‡∏î',
        value: `${data.absent} ‡∏Ñ‡∏ô`,
        inline: true
      },
      {
        name: 'üèñÔ∏è ‡∏•‡∏≤',
        value: `${data.onLeave} ‡∏Ñ‡∏ô`,
        inline: true
      }
    ],
    footer: {
      text: 'AMGO HR System'
    },
    timestamp: new Date().toISOString()
  }

  return webhook.sendEmbed(embed)
}

// Export helper functions for external use
export { getWebhookUrl, isNotificationEnabled }