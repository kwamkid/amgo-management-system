// app/api/discord/test-webhook/route.ts

import { NextRequest, NextResponse } from 'next/server'
import axios from 'axios'
import { EmbedColors } from '@/types/discord'

export async function POST(request: NextRequest) {
  try {
    const { webhookUrl, type } = await request.json()
    
    if (!webhookUrl) {
      return NextResponse.json(
        { error: 'Webhook URL required' },
        { status: 400 }
      )
    }
    
    // Test message based on type
    const testMessages = {
      checkIn: {
        embeds: [{
          title: 'üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Check-in Channel',
          description: '‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ Webhook ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥',
          color: EmbedColors.SUCCESS,
          fields: [
            { name: '‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á', value: '‚úÖ ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß', inline: true },
            { name: '‡πÄ‡∏ß‡∏•‡∏≤', value: '10:15', inline: true }
          ],
          footer: { text: 'AMGO HR System - Test Message' },
          timestamp: new Date().toISOString()
        }]
      },
      leave: {
        embeds: [{
          title: 'üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Leave Channel',
          description: '‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ Webhook ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥',
          color: EmbedColors.INFO,
          fields: [
            { name: '‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á', value: 'üìã ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡∏Ç‡∏≠‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢', inline: true },
            { name: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', value: '25-26 ‡∏°.‡∏Ñ.', inline: true }
          ],
          footer: { text: 'AMGO HR System - Test Message' },
          timestamp: new Date().toISOString()
        }]
      },
      hr: {
        embeds: [{
          title: 'üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö HR Channel',
          description: '‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ Webhook ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥',
          color: EmbedColors.INFO,
          fields: [
            { name: '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', value: '50 ‡∏Ñ‡∏ô', inline: true },
            { name: '‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', value: '48 ‡∏Ñ‡∏ô', inline: true },
            { name: '‡∏•‡∏≤', value: '2 ‡∏Ñ‡∏ô', inline: true }
          ],
          footer: { text: 'AMGO HR System - Test Message' },
          timestamp: new Date().toISOString()
        }]
      },
      alerts: {
        embeds: [{
          title: 'üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Alerts Channel',
          description: '‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ Webhook ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥',
          color: EmbedColors.WARNING,
          fields: [
            { name: '‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á', value: '‚ö†Ô∏è ‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô 3 ‡∏Ñ‡∏ô ‡∏°‡∏≤‡∏™‡∏≤‡∏¢' },
            { name: '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', value: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏ä‡∏°.' }
          ],
          footer: { text: 'AMGO HR System - Test Message' },
          timestamp: new Date().toISOString()
        }]
      }
    }
    
    const payload = testMessages[type as keyof typeof testMessages] || {
      content: 'üß™ Test message from AMGO HR System'
    }
    
    await axios.post(webhookUrl, payload)
    
    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('Test webhook error:', error)
    return NextResponse.json(
      { error: 'Failed to send test message' },
      { status: 500 }
    )
  }
}