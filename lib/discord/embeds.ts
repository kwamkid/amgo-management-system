// lib/discord/embeds.ts

import { DiscordEmbed, EmbedColors } from '@/types/discord'
import { format } from 'date-fns'
import { th } from 'date-fns/locale'

// Helper to create consistent embeds
export class EmbedBuilder {
  private embed: DiscordEmbed = {}

  setTitle(title: string): this {
    this.embed.title = title
    return this
  }

  setDescription(description: string): this {
    this.embed.description = description
    return this
  }

  setColor(color: number): this {
    this.embed.color = color
    return this
  }

  setAuthor(name: string, iconUrl?: string, url?: string): this {
    this.embed.author = { name, icon_url: iconUrl, url }
    return this
  }

  addField(name: string, value: string, inline = false): this {
    if (!this.embed.fields) this.embed.fields = []
    this.embed.fields.push({ name, value, inline })
    return this
  }

  setFooter(text: string, iconUrl?: string): this {
    this.embed.footer = { text, icon_url: iconUrl }
    return this
  }

  setTimestamp(date: Date = new Date()): this {
    this.embed.timestamp = date.toISOString()
    return this
  }

  setThumbnail(url: string): this {
    this.embed.thumbnail = { url }
    return this
  }

  build(): DiscordEmbed {
    return this.embed
  }
}

// Pre-built embed templates
export const embedTemplates = {
  checkIn: (userName: string, locationName: string, time: Date) => 
    new EmbedBuilder()
      .setAuthor(`‚úÖ ${userName}`)
      .setDescription(`‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`)
      .setColor(EmbedColors.SUCCESS)
      .addField('üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà', locationName, true)
      .addField('üïê ‡πÄ‡∏ß‡∏•‡∏≤', format(time, 'HH:mm', { locale: th }), true)
      .setFooter('AMGO Check-in System')
      .setTimestamp()
      .build(),

  checkOut: (userName: string, hours: number, overtime: number = 0) =>
    new EmbedBuilder()
      .setAuthor(`üî¥ ${userName}`)
      .setDescription(`‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`)
      .setColor(EmbedColors.INFO)
      .addField('‚è±Ô∏è ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', `${hours} ‡∏ä‡∏°.`, true)
      .addField('üí∞ ‡πÇ‡∏≠‡∏ó‡∏µ', overtime > 0 ? `${overtime} ‡∏ä‡∏°.` : '‡πÑ‡∏°‡πà‡∏°‡∏µ', true)
      .setFooter('AMGO Check-in System')
      .setTimestamp()
      .build(),

  leaveRequest: (userName: string, leaveType: string, startDate: string, endDate: string, reason: string) =>
    new EmbedBuilder()
      .setTitle('üìã ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà')
      .setAuthor(userName)
      .setColor(EmbedColors.INFO)
      .addField('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', leaveType, true)
      .addField('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', `${startDate} - ${endDate}`, true)
      .addField('‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•', reason)
      .addField('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‚è≥ ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥', true)
      .setFooter('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ú‡πà‡∏≤‡∏ô /approve ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö')
      .setTimestamp()
      .build(),

  overtimeWarning: (userName: string, hours: number, location: string) =>
    new EmbedBuilder()
      .setTitle('‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ô‡∏≤‡∏ô')
      .setDescription(`**${userName}** ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏°‡∏≤ ${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏•‡πâ‡∏ß`)
      .setColor(EmbedColors.WARNING)
      .addField('üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà', location, true)
      .addField('üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', '‡∏Ñ‡∏ß‡∏£‡πÉ‡∏´‡πâ‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏á')
      .setTimestamp()
      .build(),

  error: (title: string, error: string) =>
    new EmbedBuilder()
      .setTitle(`‚ùå ${title}`)
      .setDescription(error)
      .setColor(EmbedColors.DANGER)
      .setTimestamp()
      .build()
}